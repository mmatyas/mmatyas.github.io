"use strict";(()=>{var n=class{constructor(n){this.blob=n,this.view=new DataView(this.blob),this.offset=0,this.t=new TextDecoder}o(){return this.offset}size(){return this.blob.byteLength}seek(n){this.offset=n}i(n){const t=this.blob.slice(this.offset,this.offset+n);return this.offset+=n,t}u(){const n=this.view.getUint8(this.offset);return this.offset+=1,n}h(){const n=this.view.getUint32(this.offset,!0);return this.offset+=4,n}l(){const n=this.view.getBigUint64(this.offset,!0);return this.offset+=8,n}j(){const n=[];for(;;){const t=this.u();if(!t)break;n.push(t)}const t=new Uint8Array(n);return this.t.decode(t)}},t=class{constructor(){this.A=[],this.size=0,this.m=new TextEncoder}O(n){this.A.push(n),this.size+=n.byteLength}_(n){this.O(new Uint8Array([n]).buffer)}N(n){this.O(new Uint8Array(n).buffer)}J(n){this.O(new Uint32Array([n]).buffer)}S(n){this.O(new BigUint64Array([n]).buffer)}p(n){this.O(new Uint32Array(n).buffer)}B(n){const t=this.m.encode(n);this.O(t),this._(0)}U(){const n=new Uint8Array(this.size);let t=0;for(const r of this.A)n.set(new Uint8Array(r),t),t+=r.byteLength;return n.buffer}};function r(n,t){const r=n.encode(t),e=new Uint8Array(r.byteLength+1);return e.set(r,0),e[r.byteLength]=0,e}function e(n,t){return"bigint"==typeof t?t.toString():t}async function s(n,t){const e=await n.text(),s=JSON.parse(e);if("object"!=typeof s)throw new Error("The JSON file must be a mapping");if(Object.keys(s).length!==t)throw new Error(`Mismatch in the number of elements!\nThe original file has ${t} entries,\nthe JSON has ${s.length}.`);const o=new TextEncoder;return Object.entries(s).map((([n,t])=>[n,r(o,t)]))}async function o(t){try{const r=await t.arrayBuffer(),s=new n(r),o=s.h(),i=Array.from({length:o},(n=>s.h())),a=Array.from({length:o},(n=>s.l())),c=Array.from({length:o},((n,t)=>{s.seek(i[t]),s.h();const r=s.j();return[a[t],r]}));return JSON.stringify(Object.fromEntries(c),e,4)}catch(n){alert("Error when reading affix file!\n"+n.message)}return null}async function i(r,e){try{const o=await r.arrayBuffer(),i=new n(o).h();if(0==i)return new ArrayBuffer(0);const a=await s(e,i),c=new t;c.J(i);let f=4+12*i;for(const[n,t]of a)c.J(f),f+=4+t.byteLength;for(const[n,t]of a)c.S(BigInt(n));for(const[n,t]of a)c.N([1,3,0,255]),c.O(t);return c.U()}catch(n){alert("Error when creating affix file!\n"+n.message)}return null}async function a(t){try{const r=await t.arrayBuffer(),s=new n(r),o=s.h(),i=Array.from({length:o},(n=>s.h())),a=Array.from({length:o},(n=>s.l())),c=Array.from({length:o},((n,t)=>{s.seek(i[t]),s.u();const r=s.j();return[a[t],r]}));return JSON.stringify(Object.fromEntries(c),e,4)}catch(n){alert("Error when reading affix file!\n"+n.message)}return null}async function c(r,e){try{const o=await r.arrayBuffer(),i=new n(o),a=i.h();if(0==a)return new ArrayBuffer(0);const c=await s(e,a),f=Array.from({length:a},(n=>i.h())),u=new t;u.J(a);let h=4+12*a;for(const[n,t]of c)u.J(h),h+=1+t.byteLength;for(const[n,t]of c)u.S(BigInt(n));for(let n=0;n<a;n++){i.seek(f[n]);const t=i.u(),[r,e]=c[n];u._(t),u.O(e)}return u.U()}catch(n){alert("Error when creating affix file!\n"+n.message)}return null}async function f(t){try{const r=await t.arrayBuffer(),s=new n(r),o=s.h(),i=Array.from({length:o},(n=>s.h())),a=Array.from({length:o},(n=>s.l())),c=Array.from({length:o},((n,t)=>{s.seek(i[t]);const r=s.j();return[a[t],r]}));return JSON.stringify(Object.fromEntries(c),e,4)}catch(n){alert("Error when reading affix file!\n"+n.message)}return null}async function u(r,e){try{const o=await r.arrayBuffer(),i=new n(o).h();if(0==i)return new ArrayBuffer(0);const a=await s(e,i),c=new t;c.J(i);let f=4+12*i;for(const[n,t]of a)c.J(f),f+=t.byteLength;for(const[n,t]of a)c.S(BigInt(n));for(const[n,t]of a)c.O(t);return c.U()}catch(n){alert("Error when creating affix file!\n"+n.message)}return null}async function h(t){try{const r=await t.arrayBuffer(),e=new n(r),s=e.h();e.seek(1350088);const o=Array.from({length:s},(n=>e.j()));return JSON.stringify(o,null,4)}catch(n){alert("Error when reading affix file!\n"+n.message)}return null}async function l(e,s){try{const o=await e.arrayBuffer(),i=new n(o),a=i.h();if(0==a)return new ArrayBuffer(0);const c=new t;i.seek(0);const f=i.i(1350088);c.O(f);const u=await async function(n,t){const e=await n.text(),s=JSON.parse(e);if(!Array.isArray(s))throw new Error("The JSON file must be an array");if(s.length!==t)throw new Error(`Mismatch in the number of elements!\nThe original file has ${t} entries,\nthe JSON has ${s.length}.`);const o=new TextEncoder;return s.map((n=>r(o,n)))}(s,a);for(const n of u)c.O(n);return c.U()}catch(n){alert("Error when creating affix file!\n"+n.message)}return null}function w(n,t,r){const e=document.createElement("a"),s=new Blob([t],{type:r});e.href=window.URL.createObjectURL(s),e.download=n,e.click()}function y(n,t,r){const e=document.getElementById(n);document.getElementById(t).onclick=async()=>{if(!e.files||!e.files.length)return;const n=e.files[0].name+".json",t=await r(e.files[0]);n&&t&&w(n,t,"application/json")}}function d(n,t,r,e){const s=document.getElementById(n),o=document.getElementById(t);document.getElementById(r).onclick=async()=>{if(!s.files||!s.files.length)return;if(!o.files||!o.files.length)return;const n=await e(s.files[0],o.files[0]);n&&w("NEW_"+s.files[0].name,n,"application/octet-stream")}}window.onload=()=>{y("affix2json-in","affix2json-btn",o),d("json2affix-orig","json2affix-json","json2affix-btn",i),y("base2json-in","base2json-btn",a),d("json2base-orig","json2base-json","json2base-btn",c),y("default2json-in","default2json-btn",f),d("json2default-orig","json2default-json","json2default-btn",u),y("keys2json-in","keys2json-btn",h),d("json2keys-orig","json2keys-json","json2keys-btn",l)}})();
